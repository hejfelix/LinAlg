import scala.virtualization.lms.common._
import language.implicitConversions
import language.higherKinds

trait LinearAlgebra extends Base {
  // Concepts
  type Vector[T]
  def vector_scale[T: Manifest: Numeric](v: Rep[Vector[T]], k: Rep[T]): Rep[Vector[T]]
		  
  // Concrete syntax
  implicit class VectorOps[T: Manifest: Numeric](v: Rep[Vector[T]]) {
    def *(k: Rep[T]) = vector_scale(v, k)
  }
  //implicit def vops[T: Manifest: Numeric](v: Rep[Vector[T]]) = VectorOps(v)
  implicit def any2rep[T: Manifest](t: T) = unit(t)

}

trait Interpreter extends Base {
  override type Rep[+A] = A
  override protected def unit[A: Manifest](a: A) = a
}

trait LinearAlgebraInterpreter extends LinearAlgebra with Interpreter {
  override type Vector[T] = Seq[T]
  override def vector_scale[T: Manifest](v: Seq[T], k: T)(implicit num: Numeric[T]) = v map (x => num.times(x, k))
}

trait LinearAlgebraExp extends LinearAlgebra with BaseExp {

  // Reification of the concept of scaling a vector `v` by a factor `k`
  case class VectorScale[T: Manifest: Numeric](v: Exp[Vector[T]], k: Exp[T]) extends Def[Vector[T]]

  override def vector_scale[T: Manifest: Numeric](v: Exp[Vector[T]], k: Exp[T]) = toAtom(VectorScale(v, k))

  // Here we say how a Rep[Vector] will be bound to a Seq[Double] in regular Scala code
  override type Vector[T] = Seq[T]
}

trait ScalaGenLinearAlgebra extends ScalaGenBase {
  // This code generator works with IR nodes defined by the LinearAlgebraExp trait
  val IR: LinearAlgebraExp
  import IR._

  override def emitNode(sym: Sym[Any], node: Def[Any]): Unit = node match {
    case VectorScale(v, k) => {
      emitValDef(sym, quote(v) + ".map(x => x * " + quote(k) + ")")
    }
    case _ => super.emitNode(sym, node)
  }
}

trait LinearAlgebraExpOpt extends LinearAlgebraExp {
  override def vector_scale[T: Manifest: Numeric](v: Exp[Vector[T]], k: Exp[T]) = k match {
    case Const(1.0) => v
    case _ => super.vector_scale(v, k)
  }
}

trait Prog extends LinearAlgebra {
  def f(v: Rep[Vector[Double]]): Rep[Vector[Double]] = v * 12.34d
  def g(v: Rep[Vector[Double]]): Rep[Vector[Double]] = v * 1d
  def h(v: Rep[Vector[Int]]): Rep[Vector[Int]] = v * 2
}

object Main extends App {

  val prog = new Prog with LinearAlgebraInterpreter
  println(prog.f(Seq(1.0, 2.0))) // prints “Seq(12.34, 24.68)”   

  val progIR = new Prog with LinearAlgebraExp with EffectExp 
  val codegen = new ScalaGenEffect with ScalaGenLinearAlgebra { val IR: progIR.type = progIR }
  codegen.emitSource(progIR.h, "H", new java.io.PrintWriter(System.out))

  val prog2 = new Prog with LinearAlgebraExpOpt with EffectExp with CompileScala { self =>
    override val codegen = new ScalaGenEffect with ScalaGenLinearAlgebra { val IR: self.type = self }
  }
  val f = prog2.comile(prog2.f)
  println(f(Seq(1d,2d,3d)))
}
